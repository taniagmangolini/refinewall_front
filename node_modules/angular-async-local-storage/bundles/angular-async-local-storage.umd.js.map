{"version":3,"file":"angular-async-local-storage.umd.js","sources":["../../out-tsc/lib/src/service/databases/async-local-database.ts","../../out-tsc/lib/src/service/databases/indexeddb-database.ts","../../out-tsc/lib/src/service/databases/localstorage-database.ts","../../out-tsc/lib/src/service/databases/mock-local-database.ts","../../out-tsc/lib/src/service/validation/json-validator.ts","../../out-tsc/lib/src/service/lib.service.ts","../../out-tsc/lib/src/module.ts","../../out-tsc/lib/index.ts","../../out-tsc/lib/angular-async-local-storage.ts"],"sourcesContent":["import { Observable } from 'rxjs/Observable';\n\nexport abstract class AsyncLocalDatabase {\n\n  abstract getItem<T = any>(key: string): Observable<T | null>;\n  abstract setItem(key: string, data: any): Observable<boolean>;\n  abstract removeItem(key: string): Observable<boolean>;\n  abstract clear(): Observable<boolean>;\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs/Observable';\nimport { ReplaySubject } from 'rxjs/ReplaySubject';\nimport { map, mergeMap, first } from 'rxjs/operators';\nimport { fromEvent as observableFromEvent }  from 'rxjs/observable/fromEvent';\nimport { of as observableOf }  from 'rxjs/observable/of';\nimport { _throw as observableThrow } from 'rxjs/observable/throw';\nimport { race as observableRace }  from 'rxjs/observable/race';\n\nimport { AsyncLocalDatabase } from './async-local-database';\n\n@Injectable()\nexport class IndexedDBDatabase extends AsyncLocalDatabase {\n\n  /**\n   * IndexedDB database name for local storage\n   */\n  protected readonly dbName = 'ngStorage';\n  /**\n   * IndexedDB object store name for local storage\n   */\n  protected readonly objectStoreName = 'localStorage';\n  /**\n   * IndexedDB key path name for local storage (where an item's key will be stored)\n   */\n  protected readonly keyPath = 'key';\n  /**\n   * IndexedDB data path name for local storage (where items' value will be stored)\n   */\n  protected readonly dataPath = 'value';\n  /**\n   * IndexedDB database connection, wrapped in a RxJS ReplaySubject to be able to access the connection\n   * even after the connection success event happened\n   */\n  protected database: ReplaySubject<IDBDatabase>;\n\n  /**\n   * Connects to IndexedDB\n   */\n  constructor() {\n\n    super();\n\n    /* Creating the RxJS ReplaySubject */\n    this.database = new ReplaySubject<IDBDatabase>();\n\n    /* Connecting to IndexedDB */\n    this.connect();\n\n  }\n\n  /**\n   * Gets an item value in local storage\n   * @param key The item's key\n   * @returns The item's value if the key exists, null otherwise, wrapped in an RxJS Observable\n   */\n  getItem<T = any>(key: string) {\n\n    /* Opening a trasaction and requesting the item in local storage */\n    return this.transaction().pipe(\n      map((transaction) => transaction.get(key)),\n      mergeMap((request) => {\n\n        /* Listening to the success event, and passing the item value if found, null otherwise */\n        const success = (observableFromEvent(request, 'success') as Observable<Event>).pipe(\n          map((event) => (event.target as IDBRequest).result),\n          map((result) => result && (this.dataPath in result) ? (result[this.dataPath] as T) : null)\n        );\n\n        /* Merging success and errors events and autoclosing the observable */\n        return (observableRace(success, this.toErrorObservable(request, `getter`)) as Observable<T | null>)\n          .pipe(first());\n\n      })\n    );\n\n  }\n\n  /**\n   * Sets an item in local storage\n   * @param key The item's key\n   * @param data The item's value, must NOT be null or undefined\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n  setItem(key: string, data: any) {\n\n    /* Storing null is not correctly supported by IndexedDB and unnecessary here */\n    if (data == null) {\n\n      return observableOf(true);\n\n    }\n\n    /* Opening a transaction and checking if the item already exists in local storage */\n    return this.getItem(key).pipe(\n      map((existingData) => (existingData == null) ? 'add' : 'put'),\n      mergeMap((method) => {\n\n        /* Opening a transaction */\n        return this.transaction('readwrite').pipe(mergeMap((transaction) => {\n\n          let request: IDBRequest;\n\n          /* Adding or updating local storage, based on previous checking */\n          switch (method) {\n            case 'add':\n              request = transaction.add({ [this.dataPath]: data }, key);\n              break;\n            case 'put':\n            default:\n              request = transaction.put({ [this.dataPath]: data }, key);\n              break;\n          }\n\n          /* Merging success (passing true) and error events and autoclosing the observable */\n          return (observableRace(this.toSuccessObservable(request), this.toErrorObservable(request, `setter`)) as Observable<boolean>)\n            .pipe(first());\n\n        }));\n\n      })\n    );\n\n  }\n\n  /**\n   * Deletes an item in local storage\n   * @param key The item's key\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n  removeItem(key: string) {\n\n    /* Opening a transaction and checking if the item exists in local storage */\n    return this.getItem(key).pipe(mergeMap((data) => {\n\n      /* If the item exists in local storage */\n      if (data != null) {\n\n        /* Opening a transaction */\n        return this.transaction('readwrite').pipe(mergeMap((transaction) => {\n\n          /* Deleting the item in local storage */\n          const request = transaction.delete(key);\n\n          /* Merging success (passing true) and error events and autoclosing the observable */\n          return (observableRace(this.toSuccessObservable(request), this.toErrorObservable(request, `remover`)) as Observable<boolean>)\n            .pipe(first());\n\n        }));\n\n      }\n\n      /* Passing true if the item does not exist in local storage */\n      return observableOf(true).pipe(first());\n\n    }));\n\n  }\n\n  /**\n   * Deletes all items from local storage\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n  clear() {\n\n    /* Opening a transaction */\n    return this.transaction('readwrite').pipe(mergeMap((transaction) => {\n\n      /* Deleting all items from local storage */\n      const request = transaction.clear();\n\n      /* Merging success (passing true) and error events and autoclosing the observable */\n      return (observableRace(this.toSuccessObservable(request), this.toErrorObservable(request, `clearer`)) as Observable<boolean>)\n        .pipe(first());\n\n    }));\n\n  }\n\n  /**\n   * Connects to IndexedDB and creates the object store on first time\n   */\n  protected connect() {\n\n    /* Connecting to IndexedDB */\n    const request = indexedDB.open(this.dbName);\n\n    /* Listening the event fired on first connection, creating the object store for local storage */\n    (observableFromEvent(request, 'upgradeneeded') as Observable<Event>)\n      .pipe(first())\n      .subscribe((event) => {\n\n        /* Getting the database connection */\n        const database = (event.target as IDBRequest).result as IDBDatabase;\n\n        /* Checking if the object store already exists, to avoid error */\n        if (!database.objectStoreNames.contains(this.objectStoreName)) {\n\n          /* Creating the object store for local storage */\n          database.createObjectStore(this.objectStoreName);\n\n        }\n\n      });\n\n    /* Listening the success event and converting to an RxJS Observable */\n    const success = observableFromEvent(request, 'success') as Observable<Event>;\n\n    /* Merging success and errors events */\n    (observableRace(success, this.toErrorObservable(request, `connection`)) as Observable<Event>)\n      .pipe(first())\n      .subscribe((event) => {\n\n        /* Storing the database connection for further access */\n        this.database.next((event.target as IDBRequest).result as IDBDatabase);\n\n      }, (error) => {\n\n        this.database.error(error as Error);\n\n      });\n\n  }\n\n  /**\n   * Opens an IndexedDB transaction and gets the local storage object store\n   * @param mode Default to 'readonly' for read operations, or 'readwrite' for write operations\n   * @returns An IndexedDB transaction object store, wrapped in an RxJS Observable\n   */\n  protected transaction(mode: 'readonly' | 'readwrite' = 'readonly') {\n\n    /* From the IndexedDB connection, opening a transaction and getting the local storage objet store */\n    return this.database\n      .pipe(map((database) => database.transaction([this.objectStoreName], mode).objectStore(this.objectStoreName)));\n\n  }\n\n  /**\n   * Transforms a IndexedDB success event in an RxJS Observable\n   * @param request The request to listen\n   * @returns A RxJS Observable with true value\n   */\n  protected toSuccessObservable(request: IDBRequest) {\n\n    /* Transforming a IndexedDB success event in an RxJS Observable with true value */\n    return (observableFromEvent(request, 'success') as Observable<Event>)\n      .pipe(map(() => true));\n\n  }\n\n  /**\n   * Transforms a IndexedDB error event in an RxJS ErrorObservable\n   * @param request The request to listen\n   * @param error Optionnal details about the error's origin\n   * @returns A RxJS ErrorObservable\n   */\n  protected toErrorObservable(request: IDBRequest, error = ``) {\n\n    /* Transforming a IndexedDB error event in an RxJS ErrorObservable */\n    return (observableFromEvent(request, 'error') as Observable<Event>)\n      .pipe(mergeMap((event) => observableThrow(new Error(`IndexedDB ${error} issue : ${request.error.message}.`))));\n\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { map } from 'rxjs/operators';\nimport { of as observableOf } from 'rxjs/observable/of';\nimport { _throw as observableThrow } from 'rxjs/observable/throw';\n\nimport { AsyncLocalDatabase } from './async-local-database';\n\n@Injectable()\nexport class LocalStorageDatabase extends AsyncLocalDatabase {\n\n  /* Initializing native localStorage right now to be able to check its support on class instanciation */\n  protected localStorage = localStorage;\n\n  /**\n   * Gets an item value in local storage\n   * @param key The item's key\n   * @returns The item's value if the key exists, null otherwise, wrapped in an RxJS Observable\n   */\n  getItem<T = any>(key: string): Observable<T | null> {\n\n    const unparsedData = this.localStorage.getItem(key);\n    let parsedData: T | null = null;\n\n    if (unparsedData != null) {\n\n      try {\n        parsedData = JSON.parse(unparsedData);\n      } catch (error) {\n        return observableThrow(new Error(`Invalid data in localStorage.`));\n      }\n\n    }\n\n    return observableOf(parsedData);\n\n  }\n\n  /**\n   * Sets an item in local storage\n   * @param key The item's key\n   * @param data The item's value, must NOT be null or undefined\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n  setItem(key: string, data: any) {\n\n    this.localStorage.setItem(key, JSON.stringify(data));\n\n    return observableOf(true);\n\n  }\n\n  /**\n   * Deletes an item in local storage\n   * @param key The item's key\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n  removeItem(key: string) {\n\n    this.localStorage.removeItem(key);\n\n    return observableOf(true);\n\n  }\n\n  /**\n   * Deletes all items from local storage\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n  clear() {\n\n    this.localStorage.clear();\n\n    return observableOf(true);\n\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { map } from 'rxjs/operators';\nimport { of as observableOf } from 'rxjs/observable/of';\n\nimport { AsyncLocalDatabase } from './async-local-database';\n\n@Injectable()\nexport class MockLocalDatabase extends AsyncLocalDatabase {\n\n  protected localStorage = new Map<string, any>();\n\n  /**\n   * Gets an item value in local storage\n   * @param key The item's key\n   * @returns The item's value if the key exists, null otherwise, wrapped in an RxJS Observable\n   */\n   getItem<T = any>(key: string) {\n\n    const rawData: T | null = this.localStorage.get(key);\n\n    return observableOf((rawData !== undefined) ? rawData : null);\n\n  }\n\n  /**\n   * Sets an item in local storage\n   * @param key The item's key\n   * @param data The item's value, must NOT be null or undefined\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n   setItem(key: string, data: any) {\n\n    this.localStorage.set(key, data);\n\n    return observableOf(true);\n\n  }\n\n  /**\n   * Deletes an item in local storage\n   * @param key The item's key\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n   removeItem(key: string) {\n\n    this.localStorage.delete(key);\n\n    return observableOf(true);\n\n  }\n\n  /**\n   * Deletes all items from local storage\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n   clear() {\n\n    this.localStorage.clear();\n\n    return observableOf(true);\n\n  }\n\n}\n","import { JSONSchema, JSONSchemaType } from './json-schema';\n\n/**\n * @todo Add other JSON Schema validation features\n */\nexport class JSONValidator {\n\n  protected readonly simpleTypes = ['string', 'number', 'boolean', 'object'];\n\n  protected isObjectNotNull(value: any) {\n\n    return (value !== null) && (typeof value === 'object');\n\n  }\n\n  /**\n   * Validate a JSON data against a JSON Schema\n   * @param data JSON data to validate\n   * @param schema Subset of JSON Schema\n   * @returns If data is valid : true, if it is invalid : false, and throws if the schema is invalid\n   */\n  validate(data: any, schema: JSONSchema) {\n\n    if (!this.isObjectNotNull(schema)) {\n\n      throw new Error(`A schema must be an object (unlike spec, booleans are not supported to enforce strict types).`);\n\n    }\n\n    if ((!schema.hasOwnProperty('type') || schema.type === 'array' || schema.type === 'object')\n    && !schema.hasOwnProperty('properties') && !schema.hasOwnProperty('items')) {\n\n      throw new Error(`Each value must have a 'type' or 'properties' or 'items', to enforce strict types.`);\n\n    }\n\n    if (schema.hasOwnProperty('type') && !this.validateType(data, schema)) {\n      return false;\n    }\n\n    if (schema.hasOwnProperty('items') && !this.validateItems(data, schema)) {\n      return false;\n    }\n\n    if (schema.hasOwnProperty('properties')) {\n\n      if (schema.hasOwnProperty('required') && !this.validateRequired(data, schema)) {\n        return false;\n      }\n\n      if (!this.validateProperties(data, schema)) {\n        return false;\n      }\n\n    }\n\n    return true;\n\n  }\n\n  protected validateProperties(data: {}, schema: JSONSchema) {\n\n    if (!this.isObjectNotNull(data)) {\n\n      return false;\n\n    }\n\n    if (!schema.properties || !this.isObjectNotNull(schema.properties)) {\n\n      throw new Error(`'properties' must be a schema object.`);\n\n    }\n\n    /**\n     * Check if the object doesn't have more properties than expected\n     * Equivalent of additionalProperties: false\n     */\n    if (Object.keys(schema.properties).length !== Object.keys(data).length) {\n\n      return false;\n\n    }\n\n    /* Recursively validate all properties */\n    for (let property in schema.properties) {\n\n      if (schema.properties.hasOwnProperty(property) && data.hasOwnProperty(property)) {\n\n        if (!this.validate(data[property], schema.properties[property])) {\n\n          return false;\n\n        }\n\n      }\n\n    }\n\n    return true;\n\n  }\n\n  protected validateRequired(data: {}, schema: JSONSchema) {\n\n    if (!this.isObjectNotNull(data)) {\n\n      return false;\n\n    }\n\n    if (!Array.isArray(schema.required)) {\n\n      throw new Error(`'required' field must be an array. Note that since JSON Schema draft 6, booleans are not supported anymore.`);\n\n    }\n\n    for (let requiredProp of schema.required) {\n\n      if (typeof requiredProp !== 'string') {\n\n        throw new Error(`'required' array must contain strings only.`);\n\n      }\n\n      /* Checks if the property is present in the schema 'properties' */\n      if (!schema.properties || !schema.properties.hasOwnProperty(requiredProp)) {\n\n        throw new Error(`'required' properties must be described in 'properties' too.`);\n\n      }\n\n      /* Checks if the property is present in the data */\n      if (!data.hasOwnProperty(requiredProp)) {\n\n        return false;\n\n      }\n\n    }\n\n    return true;\n\n  }\n\n  protected validateType(data: any, schema: JSONSchema) {\n\n    if (Array.isArray(schema.type)) {\n\n      return this.validateTypeList(data, schema);\n\n    }\n\n    if (typeof schema.type !== 'string') {\n\n      throw new Error(`'type' must be a string (arrays of types are not supported yet).`);\n\n    }\n\n    if ((schema.type === 'null') && (data !== null)) {\n\n      return false;\n\n    }\n\n    if ((this.simpleTypes.indexOf(schema.type) !== -1) && (typeof data !== schema.type)) {\n\n      return false;\n\n    }\n\n    if ((schema.type === 'integer') && ((typeof data !== 'number') || !Number.isInteger(data))) {\n\n      return false;\n\n    }\n\n    return true;\n\n  }\n\n\n  protected validateTypeList(data: any, schema: JSONSchema) {\n\n    const types = schema.type as JSONSchemaType[];\n\n    const typesTests: boolean[] = [];\n\n    for (let type of types) {\n\n      typesTests.push(this.validateType(data, { type }));\n\n    }\n\n    return (typesTests.indexOf(true) !== -1);\n\n  }\n\n  protected validateItems(data: any[], schema: JSONSchema) {\n\n    if (!Array.isArray(data)) {\n\n      return false;\n\n    }\n\n    if (Array.isArray(schema.items)) {\n\n      return this.validateItemsList(data, schema);\n\n    }\n\n    if (!schema.items || !this.isObjectNotNull(schema.items)) {\n\n      throw new Error(`'items' must be a schema object.`);\n\n    }\n\n    for (let value of data) {\n\n      if (!this.validate(value, schema.items)) {\n        return false;\n      }\n\n    }\n\n    return true;\n\n  }\n\n  protected validateItemsList(data: any, schema: JSONSchema) {\n\n    const items = schema.items as JSONSchema[];\n\n    if (data.length !== items.length) {\n\n      return false;\n\n    }\n\n    for (let i = 0; i < items.length; i += 1) {\n\n      if (!this.validate(data[i], items[i])) {\n        return false;\n      }\n\n    }\n\n    return true;\n\n  }\n\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { mergeMap } from 'rxjs/operators';\nimport { _throw as observableThrow } from 'rxjs/observable/throw';\nimport { of as observableOf } from 'rxjs/observable/of';\n\nimport { AsyncLocalDatabase } from './databases/async-local-database';\nimport { JSONSchema } from './validation/json-schema';\nimport { JSONValidator } from './validation/json-validator';\n\nexport interface ALSGetItemOptions {\n  schema?: JSONSchema | null;\n}\n\n@Injectable()\nexport class AsyncLocalStorage {\n\n  protected readonly getItemOptionsDefault = {\n    schema: null\n  };\n\n  constructor(protected database: AsyncLocalDatabase, protected jsonValidator: JSONValidator) {}\n\n  /**\n   * Gets an item value in local storage\n   * @param key The item's key\n   * @returns The item's value if the key exists, null otherwise, wrapped in an RxJS Observable\n   */\n  getItem<T = any>(key: string, options: ALSGetItemOptions = this.getItemOptionsDefault) {\n\n    return this.database.getItem<T>(key).pipe(\n\n      /* Validate data upon a json schema if requested */\n      mergeMap((data) => {\n\n        if (options.schema && data !== null) {\n\n          let validation = true;\n\n          try {\n            validation = this.jsonValidator.validate(data, options.schema);\n          } catch (error) {\n            return observableThrow(error);\n          }\n\n          if (!validation) {\n            return observableThrow(new Error(`JSON invalid`));\n          }\n\n        }\n\n        return observableOf(data);\n\n      }));\n\n  }\n\n  /**\n   * Sets an item in local storage\n   * @param key The item's key\n   * @param data The item's value, must NOT be null or undefined\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n   setItem(key: string, data: any) {\n\n    return this.database.setItem(key, data);\n\n  }\n\n  /**\n   * Deletes an item in local storage\n   * @param key The item's key\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n   removeItem(key: string) {\n\n    return this.database.removeItem(key);\n\n  }\n\n  /**\n   * Deletes all items from local storage\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n   clear() {\n\n    return this.database.clear();\n\n  }\n\n}\n","import { NgModule, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\nimport { JSONValidator } from './service/validation/json-validator';\nimport { AsyncLocalStorage } from './service/lib.service';\nimport { AsyncLocalDatabase } from './service/databases/async-local-database';\nimport { IndexedDBDatabase } from './service/databases/indexeddb-database';\nimport { LocalStorageDatabase } from './service/databases/localstorage-database';\nimport { MockLocalDatabase } from './service/databases/mock-local-database';\n\nexport function databaseFactory(platformId: Object) {\n\n  if (isPlatformBrowser(platformId) && ('indexedDB' in window)) {\n\n    /* Try with IndexedDB in modern browsers */\n    return new IndexedDBDatabase();\n\n  } else if (isPlatformBrowser(platformId) && ('localStorage' in window)) {\n\n    /* Try with localStorage in old browsers (IE9) */\n    return new LocalStorageDatabase();\n\n  } else {\n\n    /* Fake database for server-side rendering (Universal) */\n    return new MockLocalDatabase();\n\n  }\n\n}\n\n@NgModule({\n  providers: [\n    JSONValidator,\n    {\n      provide: AsyncLocalDatabase,\n      useFactory: databaseFactory,\n      deps: [PLATFORM_ID]\n    },\n    AsyncLocalStorage,\n  ]\n})\nexport class AsyncLocalStorageModule {}\n","export { JSONSchema, JSONSchemaType } from './src/service/validation/json-schema';\nexport { AsyncLocalDatabase } from './src/service/databases/async-local-database';\nexport { IndexedDBDatabase } from './src/service/databases/indexeddb-database';\nexport { LocalStorageDatabase } from './src/service/databases/localstorage-database';\nexport { MockLocalDatabase } from './src/service/databases/mock-local-database';\nexport { JSONValidator } from './src/service/validation/json-validator';\nexport { ALSGetItemOptions, AsyncLocalStorage } from './src/service/lib.service';\nexport { AsyncLocalStorageModule } from './src/module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {databaseFactory as ɵa} from './src/module';"],"names":["ReplaySubject","map","mergeMap","observableFromEvent","observableRace","first","observableOf","observableThrow","Injectable","__extends","isPlatformBrowser","NgModule","PLATFORM_ID"],"mappings":"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"}